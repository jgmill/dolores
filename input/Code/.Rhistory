clusters = cutree(clus, k = 10)
centroids = t(sapply(unique(clusters), clust.centroid, dat.germany.tr, clusters))
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
cluster.center     <-  cluster.k$centers
final.centers     <- data.frame((sapply(unique(clusters),
clust.centroid,
dat.germany.tr,
cluster.k$cluster)))
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
dat.germany.wind <- data.frame(rbind(c(0, NA, final.memb), dat.germany.wind))
dat.germany.pv   <- data.frame(rbind(c(0, NA, final.memb), dat.germany.pv))
sil <- silhouette(final.memb , Dis.ecl)
plot(sil, col=1:2, border=NA)
check <- cbind(cluster = c(final.memb), dat.germany.tre[-c(1:2),])
check$lat <- as.numeric(as.character(check$lat))
check$lon <- as.numeric(as.character(check$lon))
check$cluster <- as.numeric((check$cluster))
scatter.hist(check$cluster, check$lat)
scatter.hist(check$cluster, check$lon)
ggplot(check[-1,]) + geom_point(aes(x=lon, y=lat, colour=as.factor(cluster)))
clusters = cutree(clus, k = 8)
centroids = t(sapply(unique(clusters), clust.centroid, dat.germany.tr, clusters))
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
cluster.center     <-  cluster.k$centers
final.centers     <- data.frame((sapply(unique(clusters),
clust.centroid,
dat.germany.tr,
cluster.k$cluster)))
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
dat.germany.wind <- data.frame(rbind(c(0, NA, final.memb), dat.germany.wind))
dat.germany.pv   <- data.frame(rbind(c(0, NA, final.memb), dat.germany.pv))
sil <- silhouette(final.memb , Dis.ecl)
plot(sil, col=1:2, border=NA)
check <- cbind(cluster = c(final.memb), dat.germany.tre[-c(1:2),])
check$lat <- as.numeric(as.character(check$lat))
check$lon <- as.numeric(as.character(check$lon))
check$cluster <- as.numeric((check$cluster))
scatter.hist(check$cluster, check$lat)
scatter.hist(check$cluster, check$lon)
ggplot(check[-1,]) + geom_point(aes(x=lon, y=lat, colour=as.factor(cluster)))
heatmap(as.matrix(Dis.ecl))
fviz_nbclust(dat.germany.tr, FUN = hcut, method = "silhouette")
clusters = cutree(clus, k = 5)
centroids = t(sapply(unique(clusters), clust.centroid, dat.germany.tr, clusters))
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
cluster.center     <-  cluster.k$centers
final.centers     <- data.frame((sapply(unique(clusters),
clust.centroid,
dat.germany.tr,
cluster.k$cluster)))
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
dat.germany.wind <- data.frame(rbind(c(0, NA, final.memb), dat.germany.wind))
dat.germany.pv   <- data.frame(rbind(c(0, NA, final.memb), dat.germany.pv))
sil <- silhouette(final.memb , Dis.ecl)
plot(sil, col=1:2, border=NA)
check <- cbind(cluster = c(final.memb), dat.germany.tre[-c(1:2),])
check$lat <- as.numeric(as.character(check$lat))
check$lon <- as.numeric(as.character(check$lon))
check$cluster <- as.numeric((check$cluster))
scatter.hist(check$cluster, check$lat)
scatter.hist(check$cluster, check$lon)
ggplot(check[-1,]) + geom_point(aes(x=lon, y=lat, colour=as.factor(cluster)))
################################################################################
#
# Extract Centroids or Medoids from clusters
#
################################################################################
rm(list = ls())
# List all packages needed for session
neededPackages = c("dplyr", "tidyr", "psych", "cluster", "distances",
"ecodist")
allPackages    = c(neededPackages %in% installed.packages()[,"Package"])
# Install packages (if not already installed)
if (!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
# Load all defined packages
lapply(neededPackages, function(x) suppressPackageStartupMessages(
library(x, character.only = TRUE)))
################################################################################
################################################################################
# NOTE: Edit this section only
## Change your wd (location of time series files)
wd.path          <- "/Users/claudiaguenther/Documents/dolores/input/"
# Change path were to export the files to
file.path.export <- "/Users/claudiaguenther/Documents/dolores/input/"
# Give the file names
wind.name <- "timeseries_germany_wind_14.csv"
pv.name   <- "timeseries_germany_pv_14.csv"
# Year of data (2 digit)
year <- 14
## Set the number of clusters (e.g. 2)
no.cluster     <- 8
## Determine wether use want to export centroids (TRUE) or medoids (FALSE)
cluster.export.centroid <- TRUE
################################################################################
################################################################################
# Read in wind and pv data set
dat.germany.wind = read.csv(file = paste0(wd.path, "/", wind.name))
dat.germany.pv   = read.csv(file = paste0(wd.path, "/", pv.name))
colnames(dat.germany.wind)[2]   <- "hour"
colnames(dat.germany.pv)[2]     <- "hour"
rownames(dat.germany.wind)[1:2] <- c("lat", "lon")
rownames(dat.germany.pv)[1:2]   <- c("lat", "lon")
# Bind pv and wind data together
dat.germany <- rbind(dat.germany.wind, dat.germany.pv[-c(1:2),])
# Reshape data (each hour becomes a variable)
dat.germany.tre           = as.data.frame(t(dat.germany))
colnames(dat.germany.tre) = unlist(dat.germany.tre[2,])
colnames(dat.germany.tre)[1:2] = c("lat", "lon")
dat.germany.tr           = as.data.frame(apply(dat.germany.tre[-c(1:2),-c(1:2)], 2, as.numeric))
# Use euclidean distance
Dis.ecl <- dist(dat.germany.tr, method = "euclidean")
# levelplot(as.matrix(Dis.ecl)) # takes very long
# Hierachcal cluster analysis based on Ward & euclidean distance
clus <- hclust(Dis.ecl, method = "ward.D2")
# Function to find centroid in cluster i
clust.centroid = function(dat, clusters.IND) {
clusters.found = unique(clusters.IND)
centroid.list  = numeric()
for(j in 1:length(clusters.found)){
c   = clusters.found[j]
memb = which(clusters.IND == c)
# Find medoid (shortes distance to other cluster members)
centroid = colMeans(dat[memb,])
# Save centroid
if(j == 1){
centroid.list = centroid
} else {
centroid.list = rbind(centroid.list, centroid)}
}
rownames(centroid.list)  = clusters.found
return(centroid.list)
}
# Function to find medoid in clusters i
clust.medoid = function(distancematrix, clusters.IND) {
clusters.found = unique(clusters.IND)
cluster.list   = list()
for(j in 1:length(clusters.found)){
c   = clusters.found[j]
memb = which(clusters.IND == c)
# Find medoid (shortes distance to other cluster members)
cluster.list[[j]] = names(which.min(rowSums(distancematrix[memb, memb])))
}
unlist(cluster.list)
}
# Determine the number of clusters
clusters = cutree(clus, k = no.cluster)
# Get Ward's centroids: Use for k mean initialization
centroids = clust.centroid(dat.germany.tr, clusters)
# Run k means on extracted centroids
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
cluster.centroid   <-  cluster.k$centers
# Oberve change of cluster membership
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
# Get medoids
cluster.medoid.IND  = clust.medoid(distancematrix = as.matrix(Dis.ecl), clusters.IND = final.memb)
cluster.medoid.wind = data.frame(t(dat.germany.wind[-c(1:2),paste0("outputV", cluster.medoid.IND)]))
cluster.medoid.pv   = data.frame(t(dat.germany.pv[-c(1:2), paste0("outputV", cluster.medoid.IND)]))
colnames(cluster.medoid.wind) = dat.germany.wind[-c(1:2),]$hour
colnames(cluster.medoid.pv)   = dat.germany.pv[-c(1:2),]$hour
# Get centroids
cluster.centroid.wind = data.frame(cluster.centroid[,1:8760])
cluster.centroid.pv   = data.frame(cluster.centroid[,8761:17520])
colnames(cluster.centroid.wind) = dat.germany.wind[-c(1:2),]$hour
colnames(cluster.centroid.pv)   = dat.germany.pv[-c(1:2),]$hour
# Export medoid/centroids membership to dataframe
if (cluster.export.centroid){
write.csv(cluster.centroid.wind, file = paste0(file.path.export, "/", "wind.centroids", no.cluster, "_", year))
write.csv(cluster.centroid.pv,   file = paste0(file.path.export, "/", "pv.centroids", no.cluster, "_", year))
} else {
write.csv(cluster.medoid.wind, file = paste0(file.path.export, "/", "wind.medoids", no.cluster, "_", year))
write.csv(cluster.medoid.pv,   file = paste0(file.path.export, "/", "pv.medoids", no.cluster, "_", year))
}
rm(list=ls())
wd.path = "/Users/claudiaguenther/Documents/dolores"
################################################################################
#
# Download time series from renewables ninja
#
################################################################################
rm(list = ls())
## Change path to working directory
#wd.path = "C:/Users/Lenovo/Documents/GitHub/dolores/"
wd.path = "/Users/claudiaguenther/Documents/dolores"
# Source automation file
source(paste0(wd.path,"input/Code/R/ninja_automator.r"))
# List all packages needed for session
neededPackages = c("dplyr", "tidyr", "psych", "cluster", "distances",
"ecodist", "magrittr", "lattice", "MASS", "foreign",
"NbClust", "factoextra", "caret", "ggplot2", "curl")
allPackages    = c(neededPackages %in% installed.packages()[,"Package"])
# Install packages (if not already installed)
if (!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
# Load all defined packages
lapply(neededPackages, function(x) suppressPackageStartupMessages(
library(x, character.only = TRUE)))
################################################################################
# Change your API (from renewables ninja account)
# insert your API authorisation token here
token = 'efde8da5c66ef97b495ddddf01ef55da4c8a04e6'
################################################################################
#
# Download time series from renewables ninja
#
################################################################################
rm(list = ls())
## Change path to working directory
#wd.path = "C:/Users/Lenovo/Documents/GitHub/dolores/"
wd.path = "/Users/claudiaguenther/Documents/dolores/"
# Source automation file
source(paste0(wd.path,"input/Code/R/ninja_automator.r"))
# List all packages needed for session
neededPackages = c("dplyr", "tidyr", "psych", "cluster", "distances",
"ecodist", "magrittr", "lattice", "MASS", "foreign",
"NbClust", "factoextra", "caret", "ggplot2", "curl")
allPackages    = c(neededPackages %in% installed.packages()[,"Package"])
# Install packages (if not already installed)
if (!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
# Load all defined packages
lapply(neededPackages, function(x) suppressPackageStartupMessages(
library(x, character.only = TRUE)))
################################################################################
# Change your API (from renewables ninja account)
# insert your API authorisation token here
token = 'efde8da5c66ef97b495ddddf01ef55da4c8a04e6'
#'efde8da5c66ef97b495ddddf01ef55da4c8a04e6'
h = new_handle()
handle_setheaders(h, 'Authorization'=paste('Token ', token))
dat.coordinates        <- read.csv(paste0(wd.path,"input/Geodata/coordinates.csv"))
dat.coordinates.europe <- read.csv(paste0(wd.path,"input/Geodata/coordinates_europe.csv"))
lat = dat.coordinates$lat
lon = dat.coordinates$lon
no.obs = length(lat)
turbine = rep('Vestas+V80+2000', no.obs)
dat.germany.wind.ts = ninja_aggregate_wind(lat, lon, turbine=turbine, from = '2014-01-01', to='2014-12-31')
dat.germany.wind    = rbind(
c(NA,as.character(dat.coordinates$lat)),
c(NA,as.character(dat.coordinates$lon)),
dat.germany.wind.ts)
write.csv(dat.germany.wind, file = "/Users/claudiaguenther/Documents/dolores/input/timeseries_germany_wind_14.csv")
dat.germany.wind    = rbind(
c(NA,as.character(dat.coordinates$lat)),
c(NA,as.character(dat.coordinates$lon)),
dat.germany.wind.ts)
write.csv(dat.germany.wind, file = "/Users/claudiaguenther/Documents/dolores/input/timeseries_germany_wind_14.csv")
dat.germany.pv.ts = ninja_aggregate_solar(lat = lat, lon = lon, from = '2014-01-01', to='2014-12-31', tilt = 32) # year is defined in source file
dat.germany.pv.ts = dat.germany.pv.ts[-1,]
dat.germany.pv       = rbind(
c(NA,as.character(dat.coordinates$lat)),
c(NA,as.character(dat.coordinates$lon)),
dat.germany.pv.ts)
write.csv(dat.germany.pv, file = "/Users/claudiaguenther/Documents/dolores/input/timeseries_germany_pv_14.csv")
################################################################################
#
# Clustering of wind and pv time series
#
################################################################################
rm(list = ls())
# List all packages needed for session
neededPackages = c("dplyr", "tidyr", "psych", "cluster", "distances",
"ecodist", "magrittr", "lattice", "MASS", "GGally",
"NbClust", "factoextra", "caret", "ggplot2")
allPackages    = c(neededPackages %in% installed.packages()[,"Package"])
# Install packages (if not already installed)
if (!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
# Load all defined packages
lapply(neededPackages, function(x) suppressPackageStartupMessages(
library(x, character.only = TRUE)))
wd.path = "/Users/claudiaguenther/Documents/dolores/"
dat.germany.wind = read.csv(paste0(wd.path,"input/timeseries_germany_wind_14.csv"))
dat.germany.pv   =read.csv(paste0(wd.path, "input/timeseries_germany_pv_14.csv"))
colnames(dat.germany.wind)[2]   <- "hour"
colnames(dat.germany.pv)[2]     <- "hour"
rownames(dat.germany.wind)[1:2] <- c("lat", "lon")
rownames(dat.germany.pv)[1:2]   <- c("lat", "lon")
dat.germany <- rbind(dat.germany.wind, dat.germany.pv[-c(1:2),])
dat.germany.tre           = as.data.frame(t(dat.germany))
colnames(dat.germany.tre) = unlist(dat.germany.tre[2,])
colnames(dat.germany.tre)[1:2] = c("lat", "lon")
dat.germany.tr           = as.data.frame(apply(dat.germany.tre[-c(1:2),-c(1:2)], 2, as.numeric))
Dis.ecl <- dist(dat.germany.tr, method = "euclidean")
clus <- hclust(Dis.ecl, method = "ward.D2")
plot(clus)
plot(clus, hang = -1, cex = 0.6)
dendrogram <- as.dendrogram(clus)
plot(dendrogram, ylab = "Height", leaflab = "none")
clust.centroid = function(i, dat, clusters.IND) {
ind = (clusters.IND == i)
colMeans(dat[ind,])
}
clusters = cutree(clus, k = 6)
rect.hclust(clus, k=6, border="red")
centroids = t(sapply(unique(clusters), clust.centroid, dat.germany.tr, clusters))
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
cluster.center     <-  cluster.k$centers
final.centers     <- data.frame((sapply(unique(clusters),
clust.centroid,
dat.germany.tr,
cluster.k$cluster)))
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
final.table
dat.germany.wind <- data.frame(rbind(c(0, NA, final.memb), dat.germany.wind))
dat.germany.pv   <- data.frame(rbind(c(0, NA, final.memb), dat.germany.pv))
sil <- silhouette(final.memb ,dist =  Dis.ecl)
plot(sil, col=1:2, border=NA)
check <- cbind(cluster = c(final.memb), dat.germany.tre[-c(1:2),])
check$lat <- as.numeric(as.character(check$lat))
check$lon <- as.numeric(as.character(check$lon))
check$cluster <- as.numeric((check$cluster))
scatter.hist(check$cluster, check$lat)
scatter.hist(check$cluster, check$lon)
ggplot(check[-1,]) + geom_point(aes(x=lon, y=lat, colour=as.factor(checkcluster)))
ggplot(check[-1,]) + geom_point(aes(x=lon, y=lat, colour=as.factor(check$cluster)))
ggplot(check[-1,]) + geom_point(aes(x=lon, y=lat, colour=as.factor(cluster)))
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
cluster.k$centers
f = cluster.k$centers
apply(f, 2, mean)
apply(f, 1, mean)
ggplot(check[-1,]) + geom_point(aes(x=lon, y=lat, colour=as.factor(cluster), size = 4))
ggplot(check[-1,]) + geom_area(aes(x=lon, y=lat, colour=as.factor(cluster), size = 4))
ggplot(check[-1,]) + geom_area(aes(x=lon, y=lat, colour=as.factor(cluster), size = 1))
ggplot(check[-1,]) + geom_area(aes(x=lon, y=lat, colour=as.factor(cluster)))
ggplot(check[-1,]) + geom_bar(aes(x=lon, y=lat, colour=as.factor(cluster)))
ggplot(check[-1,]) + geom_contour(aes(x=lon, y=lat, colour=as.factor(cluster)))
ggplot(check[-1,]) + geom_density(aes(x=lon, y=lat, colour=as.factor(cluster)))
ggplot(check[-1,]) + geom_abline(aes(x=lon, y=lat, colour=as.factor(cluster)))
ggplot(check[-1,]) + geom_jitter(aes(x=lon, y=lat, colour=as.factor(cluster)))
ggplot(check[-1,]) + geom_segment(aes(x=lon, y=lat, colour=as.factor(cluster)))
ggplot(check[-1,]) + geom_bin2d(aes(x=lon, y=lat, colour=as.factor(cluster)))
ggplot(check[-1,]) + geom_map(aes(x=lon, y=lat, colour=as.factor(cluster)))
ggplot(check[-1,]) + geom_tile(aes(x=lon, y=lat, colour=as.factor(cluster)))
ggplot(check[-1,]) + geom_polygon(aes(x=lon, y=lat, colour=as.factor(cluster)))
ggplot(check[-1,]) + geom_violin(aes(x=lon, y=lat, colour=as.factor(cluster)))
ggplot(check[-1,]) + geom_boxplot(aes(x=lon, y=lat, colour=as.factor(cluster)))
ggplot(check[-1,]) + geom_point(aes(x=lon, y=lat, colour=as.factor(cluster)))
fviz_nbclust(dat.germany.tr, FUN = hcut, method = "wss")
fviz_nbclust(dat.germany.tr, FUN = hcut, method = "silhouette")
sum.stats.out = function(DF) {
# create an ouput table based on row-specific criteria
formattable(DF, lapply(DF, format.settings),
options(digits = 3, format = "d"),
align = "c")
}
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
test <- cluster.k$size
z = sum.stats.out(test)
neededPackages = c("dplyr", "tidyr", "magrittr", "purrr",
"formattable", "webshot", "htmltools", "webshot")
allPackages    = c(neededPackages %in% installed.packages()[ , "Package"])
if(!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
lapply(neededPackages, library, character.only = TRUE)
z = sum.stats.out(test)
mean.avail.vec <- apply(cluster.k$centers, 1, mean)
size.vec       <- cluster.k$size
mean.avail.vec
mean.avail.vec <- percent(apply(cluster.k$centers, 1, mean))
mean.avail.vec
size.vec       <- cluster.k$size
size.vec
clusters = cutree(clus, k = 7)
rect.hclust(clus, k=6, border="red")
centroids = t(sapply(unique(clusters), clust.centroid, dat.germany.tr, clusters))
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
cluster.center     <-  cluster.k$centers
final.centers     <- data.frame((sapply(unique(clusters),
clust.centroid,
dat.germany.tr,
cluster.k$cluster)))
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
dat.germany.wind <- data.frame(rbind(c(0, NA, final.memb), dat.germany.wind))
dat.germany.pv   <- data.frame(rbind(c(0, NA, final.memb), dat.germany.pv))
sil <- silhouette(final.memb ,dist =  Dis.ecl)
plot(sil, col=1:2, border=NA)
check <- cbind(cluster = c(final.memb), dat.germany.tre[-c(1:2),])
check$lat <- as.numeric(as.character(check$lat))
check$lon <- as.numeric(as.character(check$lon))
check$cluster <- as.numeric((check$cluster))
scatter.hist(check$cluster, check$lat)
scatter.hist(check$cluster, check$lon)
ggplot(check[-1,]) + geom_point(aes(x=lon, y=lat, colour=as.factor(cluster)))
clheatmap(as.matrix(Dis.ecl))
clusters = cutree(clus, k = 6)
rect.hclust(clus, k=6, border="red")
centroids = t(sapply(unique(clusters), clust.centroid, dat.germany.tr, clusters))
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
cluster.center     <-  cluster.k$centers
final.centers     <- data.frame((sapply(unique(clusters),
clust.centroid,
dat.germany.tr,
cluster.k$cluster)))
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
dat.germany.wind <- data.frame(rbind(c(0, NA, final.memb), dat.germany.wind))
dat.germany.pv   <- data.frame(rbind(c(0, NA, final.memb), dat.germany.pv))
sil <- silhouette(final.memb ,dist =  Dis.ecl)
plot(sil, col=1:2, border=NA)
check <- cbind(cluster = c(final.memb), dat.germany.tre[-c(1:2),])
check$lat <- as.numeric(as.character(check$lat))
check$lon <- as.numeric(as.character(check$lon))
check$cluster <- as.numeric((check$cluster))
scatter.hist(check$cluster, check$lat)
scatter.hist(check$cluster, check$lon)
ggplot(check[-1,]) + geom_point(aes(x=lon, y=lat, colour=as.factor(cluster)))
clheatmap(as.matrix(Dis.ecl))
mean.avail.vec <- percent(apply(cluster.k$centers, 1, mean))
size.vec       <- cluster.k$size
sd.vec         <- apply(cluster.k$centers, 1, sd)
sd.vec
mean.avail.vec
sd.vec         <- apply(cluster.k$centers, 1, var)
sd.vec
sd
sd.vec         <- apply(cluster.k$centers, 1, sd)
n = cluster.k$centers
View(n)
mean.av.wind.vec <- percent(apply(cluster.k[1:8760,]$centers, 1, mean))
mean.av.wind.vec <- percent(apply(cluster.k[,1:8760]$centers, 1, mean))
mean.av.wind.vec <- percent(apply(cluster.k$centers[,1:8760], 1, mean))
mean.av.wind.vec
View(n)
dim(n)
mean.av.pv.vec   <- percent(apply(cluster.k$centers[,8761:17520], 1, mean))
mean.av.pv.vec
d <- as.matrix(Dis.ecl)
heatmap(d, symm = TRUE, scale = "none")
final.centers$hours <- 1:nrow(final.centers)
if(!is.null(dev.list())) dev.off()
plot(y=balancing.ex$X1, x=balancing.ex$hours, ylim=c(0,1.1*max(balancing.ex$X2)),
col='blue', type='l',
main='Spatial balancing of wind volatility', xlab='hours', ylab='Availability / Load',
xaxt='n', yaxt='n')
points(y=balancing.ex$X2, x=balancing.ex$hours, col='darkblue', type='l', lwd=1)
axis(2, pretty(c(0, 1.1*max(balancing.ex$X2))), col='blue')
par(new=T)
plot(y=balancing.ex$demand, x=balancing.ex$hours, ylim=c(0,1.1*max(balancing.ex$demand)),
col='red', type='l',
main='Spatial balancing of wind volatility', xlab='hours', ylab='Availability / Load',
xaxt='n', yaxt='n')
axis(4, pretty(c(0, 1.1*max(balancing.ex$demand))), col='red')
ger.wind = read.csv("/Users/claudiaguenther/Documents/Studium/MEMS/SS2018/EnergyInformatics/ninja_wind_country_DE_current-merra-2_corrected.csv")
ger.wind.2014 = as.data.frame(t(ger.wind[298035:306794,c(1,4)]))
colnames(ger.wind.2014) = ger.wind.2014[1,]
ger.wind.2014  = ger.wind.2014[2,]
ger.wind.2014  = as.data.frame(apply(ger.wind.2014, 2, as.numeric))
ger.demand.2014 = read.csv("/Users/claudiaguenther/Documents/Studium/MEMS/SS2018/EnergyInformatics/demand_ger_2014.csv")
ger.demand.2014 = as.data.frame(t(apply(ger.demand.2014, 1, as.numeric)))
dat.comp <- as.data.frame((cbind(final.centers, wind = ger.wind.2014[-c(8759:8760),])))
reg.model <- lmMod <- lm(wind ~ X1 + X2 + X3 + X4, data=dat.comp)
summary(reg.model)
test <- reg.model$coefficients[2]*dat.comp$X1 + reg.model$coefficients[4]*dat.comp$X2 +
reg.model$coefficients[4]*dat.comp$X4 + reg.model$coefficients[5]*dat.comp$X4
matching <- data.frame(cbind(ger.wind.2014[1:8758,], test, 1:8758))
xyplot(V1  + test  ~ V3, matching, type = "l")
if(!is.null(dev.list())) dev.off()
library(latticeExtra)
balancing.ex <- cbind(final.centers[6840:7008,c(1:3)], demand = t(ger.demand.2014[6840:7008]))
obj1 <- xyplot(X1  + X2  ~ hours, balancing.ex, type = "l")
obj1
obj2 <- xyplot(demand ~ hours, balancing.ex, type = "l")
doubleYScale(obj1, obj2, add.ylab2 = TRUE, style1 = 1, style2 = 2)
plot(y=balancing.ex$X1, x=balancing.ex$hours, ylim=c(0,1.1*max(balancing.ex$X2)),
col='blue', type='l',
main='Spatial balancing of wind volatility', xlab='hours', ylab='Availability / Load',
xaxt='n', yaxt='n')
points(y=balancing.ex$X2, x=balancing.ex$hours, col='darkblue', type='l', lwd=1)
axis(2, pretty(c(0, 1.1*max(balancing.ex$X2))), col='blue')
par(new=T)
plot(y=balancing.ex$demand, x=balancing.ex$hours, ylim=c(0,1.1*max(balancing.ex$demand)),
col='red', type='l',
main='Spatial balancing of wind volatility', xlab='hours', ylab='Availability / Load',
xaxt='n', yaxt='n')
fviz_nbclust(dat.germany.tr, FUN = hcut, method = "silhouette")
d <- as.matrix(Dis.ecl)
heatmap(d, symm = TRUE, scale = "none")
levelplot(d[1:ncol(d),ncol(d):1])
sil <- cluster::silhouette(final.memb ,dist =  Dis.ecl)
plot(sil, col=1:2, border=NA)
sil <- cluster::silhouette(cluster.k, dist =  Dis.ecl)
sil <- cluster::silhouette(cluster.k$cluster, dist =  Dis.ecl)
plot(sil, col=1:2, border=NA)
test = pam(dat.germany.tr, 6)
k = silhouette(test)
plot(k)
test = pam(dat.germany.tr, 3)
k = silhouette(test)
plot(k)
