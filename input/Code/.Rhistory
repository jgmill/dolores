DC.wind.clust <-  sort(apply(cluster.wind, 2, sum)/140)
DC.pv.clust   <-  sort(apply(cluster.wind, 2, sum)/140)
plot(DC.wind.clust)
par(2,4)
plot(DC.wind.clust)
par(mar = rep(2, 4))
plot(DC.wind.clust)
DC.wind.clust <-  sort(apply(cluster.wind, 2, sum)/140, decreasing = TRUE)
DC.pv.clust   <-  sort(apply(cluster.wind, 2, sum)/140, decreasing = TRUE)
par(mar = rep(2, 4))
plot(DC.wind.clust)
View(dat.germany.wind)
View(dat.germany.tr)
DC.wind.org   <- sort((apply(dat.germany.tre[,1:8760], 2, sum)/140), decreasing = TRUE)
par(mar = rep(2, 4))
plot(DC.wind.clust,type="l",col="blue")
lines(DC.wind.org, col="black")
DC.wind.org
DC.wind.org   <- sort((apply(dat.germany.tre[,1:8760], 2, sum)/140), decreasing = TRUE)
DC.wind.org   <- sort((apply(dat.germany.tr[,1:8760], 2, sum)/140), decreasing = TRUE)
par(mar = rep(2, 4))
plot(DC.wind.clust,type="l",col="blue")
lines(DC.wind.org, col="black")
pv.wind.org   <- sort((apply(dat.germany.tr[,8761:17520], 2, sum)/140), decreasing = TRUE)
DC.pv.clust   <-  sort(apply(cluster.wind, 2, sum)/140, decreasing = TRUE)
DC.wind.org   <- sort((apply(dat.germany.tr[,1:8760], 2, sum)/140), decreasing = TRUE)
DC.pv.org     <- sort((apply(dat.germany.tr[,8761:17520], 2, sum)/140), decreasing = TRUE)
par(mar = rep(2, 4))
plot(DC.wind.clust,type="l",col="blue")
lines(DC.wind.org, col="black")
par(mar = rep(2, 4))
plot(DC.pv.clust,type="l",col="yellow")
lines(DC.pv.org, col="black")
DC.pv.org     <- sort((apply(dat.germany.tr[,8761:17520], 2, sum)/140), decreasing = TRUE)
cluster.wind   <- cluster.k$centers[,1:8760]*cluster.k$size
cluster.pv     <- cluster.k$centers[,8761:17520]*cluster.k$size
cluster.wind   <- cluster.k$centers[,1:8760]*cluster.k$size
cluster.pv     <- cluster.k$centers[,8761:17520]*cluster.k$size
DC.wind.clust <-  sort(apply(cluster.wind, 2, sum)/140, decreasing = TRUE)
DC.pv.clust   <-  sort(apply(cluster.pv, 2, sum)/140, decreasing = TRUE)
DC.wind.org   <- sort((apply(dat.germany.tr[,1:8760], 2, sum)/140), decreasing = TRUE)
DC.pv.org     <- sort((apply(dat.germany.tr[,8761:17520], 2, sum)/140), decreasing = TRUE)
par(mar = rep(2, 4))
plot(DC.wind.clust,type="l",col="blue")
lines(DC.wind.org, col="black")
par(mar = rep(2, 4))
plot(DC.pv.clust,type="l",col="yellow")
lines(DC.pv.org, col="black")
DC.wind.clust <-  apply(cluster.wind, 2, sum)/140
DC.pv.clust   <-  sort(apply(cluster.pv, 2, sum)/140, decreasing = TRUE)
DC.wind.org   <- ((apply(dat.germany.tr[,1:8760], 2, sum)/140))
DC.pv.org     <- sort((apply(dat.germany.tr[,8761:17520], 2, sum)/140), decreasing = TRUE)
par(mar = rep(2, 4))
plot(DC.wind.clust,type="l",col="blue")
lines(DC.wind.org, col="black")
DC.wind.org == DC.wind.clust
clusters = cutree(clus, k = 2)
rect.hclust(clus, k=6, border="red")
centroids = t(sapply(unique(clusters), clust.centroid, dat.germany.tr, clusters))
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
cluster.center     <-  cluster.k$centers
final.centers     <- data.frame((sapply(unique(clusters),
clust.centroid,
dat.germany.tr,
cluster.k$cluster)))
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
dat.germany.wind <- data.frame(rbind(c(0, NA, final.memb), dat.germany.wind))
dat.germany.pv   <- data.frame(rbind(c(0, NA, final.memb), dat.germany.pv))
cluster.wind   <- cluster.k$centers[,1:8760]*cluster.k$size
cluster.pv     <- cluster.k$centers[,8761:17520]*cluster.k$size
DC.wind.clust <-  sort(apply(cluster.wind, 2, sum)/140, decreasing = TRUE)
DC.pv.clust   <-  sort(apply(cluster.pv, 2, sum)/140, decreasing = TRUE)
DC.wind.org   <- sort((apply(dat.germany.tr[,1:8760], 2, sum)/140), decreasing = TRUE)
DC.pv.org     <- sort((apply(dat.germany.tr[,8761:17520], 2, sum)/140), decreasing = TRUE)
par(mar = rep(2, 4))
plot(DC.wind.clust,type="l",col="blue")
lines(DC.wind.org, col="black")
par(mar = rep(2, 4))
plot(DC.pv.clust,type="l",col="yellow")
lines(DC.pv.org, col="black")
clusters = cutree(clus, k = 20)
rect.hclust(clus, k=6, border="red")
centroids = t(sapply(unique(clusters), clust.centroid, dat.germany.tr, clusters))
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
cluster.center     <-  cluster.k$centers
final.centers     <- data.frame((sapply(unique(clusters),
clust.centroid,
dat.germany.tr,
cluster.k$cluster)))
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
dat.germany.wind <- data.frame(rbind(c(0, NA, final.memb), dat.germany.wind))
dat.germany.pv   <- data.frame(rbind(c(0, NA, final.memb), dat.germany.pv))
cluster.wind   <- cluster.k$centers[,1:8760]*cluster.k$size
cluster.pv     <- cluster.k$centers[,8761:17520]*cluster.k$size
DC.wind.clust <-  sort(apply(cluster.wind, 2, sum)/140, decreasing = TRUE)
DC.pv.clust   <-  sort(apply(cluster.pv, 2, sum)/140, decreasing = TRUE)
DC.wind.org   <- sort((apply(dat.germany.tr[,1:8760], 2, sum)/140), decreasing = TRUE)
DC.pv.org     <- sort((apply(dat.germany.tr[,8761:17520], 2, sum)/140), decreasing = TRUE)
par(mar = rep(2, 4))
plot(DC.wind.clust,type="l",col="blue")
lines(DC.wind.org, col="black")
par(mar = rep(2, 4))
plot(DC.pv.clust,type="l",col="yellow")
lines(DC.pv.org, col="black")
cluster.center
clusters = cutree(clus, k = 10)
rect.hclust(clus, k=6, border="red")
centroids = t(sapply(unique(clusters), clust.centroid, dat.germany.tr, clusters))
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
cluster.center     <-  cluster.k$centers
final.centers     <- data.frame((sapply(unique(clusters),
clust.centroid,
dat.germany.tr,
cluster.k$cluster)))
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
dat.germany.wind <- data.frame(rbind(c(0, NA, final.memb), dat.germany.wind))
dat.germany.pv   <- data.frame(rbind(c(0, NA, final.memb), dat.germany.pv))
cluster.wind   <- cluster.k$centers[,1:8760]*cluster.k$size
cluster.pv     <- cluster.k$centers[,8761:17520]*cluster.k$size
DC.wind.clust <-  sort(apply(cluster.wind, 2, sum)/140, decreasing = TRUE)
DC.pv.clust   <-  sort(apply(cluster.pv, 2, sum)/140, decreasing = TRUE)
DC.wind.org   <- sort((apply(dat.germany.tr[,1:8760], 2, sum)/140), decreasing = TRUE)
DC.pv.org     <- sort((apply(dat.germany.tr[,8761:17520], 2, sum)/140), decreasing = TRUE)
par(mar = rep(2, 4))
plot(DC.wind.clust,type="l",col="blue")
lines(DC.wind.org, col="black")
par(mar = rep(2, 4))
plot(DC.pv.clust,type="l",col="yellow")
lines(DC.pv.org, col="black")
check <- cbind(cluster = c(final.memb), dat.germany.tre[-c(1:2),])
check$lat <- as.numeric(as.character(check$lat))
check$lon <- as.numeric(as.character(check$lon))
check$cluster <- as.numeric((check$cluster))
scatter.hist(check$cluster, check$lat)
scatter.hist(check$cluster, check$lon)
check$Cluster <- as.factor(check$cluster)
check$avail   <- apply(check[,4:ncol(check)], 1, function(x) mean(as.numeric(as.character(x))))
img <- readPNG("input/clustering_images/ger2.png")
ger <- rasterGrob(img, interpolate=TRUE)
plot.ger <- ggplot(check[-1,])  +
annotation_custom(rasterGrob(img,
width = unit(2.18,"npc"),
height = unit(1.34,"npc")),  5.4, 14.7, -Inf, Inf)   +
theme_bw()   +
geom_point(aes(x=lon, y=lat,
colour=Cluster),
size= 4) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.margin=unit(c(1,1,1,2), "cm"),
panel.grid = element_blank(),
panel.background = element_blank())
plot.ger + scale_colour_brewer(palette = "BrBG", type = seq)
check <- cbind(cluster = c(final.memb), dat.germany.tre[-c(1:2),])
check$lat <- as.numeric(as.character(check$lat))
check$lon <- as.numeric(as.character(check$lon))
check$cluster <- as.numeric((check$cluster))
scatter.hist(check$cluster, check$lat)
par(mar = rep(2, 4))
check <- cbind(cluster = c(final.memb), dat.germany.tre[-c(1:2),])
check$lat <- as.numeric(as.character(check$lat))
check$lon <- as.numeric(as.character(check$lon))
check$cluster <- as.numeric((check$cluster))
scatter.hist(check$cluster, check$lat)
rm(list = ls())
neededPackages = c("dplyr", "tidyr", "psych", "cluster", "distances",
"ecodist", "magrittr", "lattice", "MASS", "GGally",
"NbClust", "factoextra", "caret", "ggplot2", "png", "grid")
allPackages    = c(neededPackages %in% installed.packages()[,"Package"])
if (!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
lapply(neededPackages, function(x) suppressPackageStartupMessages(
library(x, character.only = TRUE)))
wd.path = "/Users/claudiaguenther/Documents/dolores/"
dat.germany.wind = read.csv(paste0(wd.path,"input/timeseries_germany_wind_14.csv"))
dat.germany.pv   =read.csv(paste0(wd.path, "input/timeseries_germany_pv_14.csv"))
colnames(dat.germany.wind)[2]   <- "hour"
colnames(dat.germany.pv)[2]     <- "hour"
rownames(dat.germany.wind)[1:2] <- c("lat", "lon")
rownames(dat.germany.pv)[1:2]   <- c("lat", "lon")
dat.germany <- rbind(dat.germany.wind, dat.germany.pv[-c(1:2),])
dat.germany.tre           = as.data.frame(t(dat.germany))
colnames(dat.germany.tre) = unlist(dat.germany.tre[2,])
colnames(dat.germany.tre)[1:2] = c("lat", "lon")
dat.germany.tr           = as.data.frame(apply(dat.germany.tre[-c(1:2),-c(1:2)], 2, as.numeric))
Dis.ecl <- dist(dat.germany.tr, method = "euclidean")
clus <- hclust(Dis.ecl, method = "ward.D2")
plot(clus)
plot(clus, hang = -1, cex = 0.6)
dendrogram <- as.dendrogram(clus)
plot(dendrogram, ylab = "Height", leaflab = "none")
clust.centroid = function(i, dat, clusters.IND) {
ind = (clusters.IND == i)
colMeans(dat[ind,])
}
clusters = cutree(clus, k = 10)
rect.hclust(clus, k=6, border="red")
centroids = t(sapply(unique(clusters), clust.centroid, dat.germany.tr, clusters))
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
cluster.center     <-  cluster.k$centers
final.centers     <- data.frame((sapply(unique(clusters),
clust.centroid,
dat.germany.tr,
cluster.k$cluster)))
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
dat.germany.wind <- data.frame(rbind(c(0, NA, final.memb), dat.germany.wind))
dat.germany.pv   <- data.frame(rbind(c(0, NA, final.memb), dat.germany.pv))
cluster.wind   <- cluster.k$centers[,1:8760]*cluster.k$size
cluster.pv     <- cluster.k$centers[,8761:17520]*cluster.k$size
DC.wind.clust <-  sort(apply(cluster.wind, 2, sum)/140, decreasing = TRUE)
DC.pv.clust   <-  sort(apply(cluster.pv, 2, sum)/140, decreasing = TRUE)
DC.wind.org   <- sort((apply(dat.germany.tr[,1:8760], 2, sum)/140), decreasing = TRUE)
DC.pv.org     <- sort((apply(dat.germany.tr[,8761:17520], 2, sum)/140), decreasing = TRUE)
check <- cbind(cluster = c(final.memb), dat.germany.tre[-c(1:2),])
check$lat <- as.numeric(as.character(check$lat))
check$lon <- as.numeric(as.character(check$lon))
check$cluster <- as.numeric((check$cluster))
scatter.hist(check$cluster, check$lat)
scatter.hist(check$cluster, check$lon)
check$Cluster <- as.factor(check$cluster)
check$avail   <- apply(check[,4:ncol(check)], 1, function(x) mean(as.numeric(as.character(x))))
scatter.hist(check$cluster, check$lat)
check <- cbind(cluster = c(final.memb), dat.germany.tre[-c(1:2),])
check$lat <- as.numeric(as.character(check$lat))
check$lon <- as.numeric(as.character(check$lon))
check$cluster <- as.numeric((check$cluster))
scatter.hist(check$cluster, check$lat)
scatter.hist(check$cluster, check$lon)
check$Cluster <- as.factor(check$cluster)
check$avail   <- apply(check[,4:ncol(check)], 1, function(x) mean(as.numeric(as.character(x))))
################################################################################
#
# Extract Centroids or Medoids from clusters
#
################################################################################
rm(list = ls())
# List all packages needed for session
neededPackages = c("dplyr", "tidyr", "psych", "cluster", "distances",
"ecodist")
allPackages    = c(neededPackages %in% installed.packages()[,"Package"])
# Install packages (if not already installed)
if (!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
# Load all defined packages
lapply(neededPackages, function(x) suppressPackageStartupMessages(
library(x, character.only = TRUE)))
################################################################################
################################################################################
# NOTE: Edit this section only
## Change your wd (location of time series files)
wd.path          <- "/Users/Lenovo/Documents/Github/dolores/input/"
# Change path were to export the files to
file.path.export <- "/Users/Lenovo/Documents/Github/dolores/input/"
# Give the file names
wind.name <- "timeseries_germany_wind_14.csv"
pv.name   <- "timeseries_germany_pv_14.csv"
################################################################################
#
# Extract Centroids or Medoids from clusters
#
################################################################################
rm(list = ls())
# List all packages needed for session
neededPackages = c("dplyr", "tidyr", "psych", "cluster", "distances",
"ecodist")
allPackages    = c(neededPackages %in% installed.packages()[,"Package"])
# Install packages (if not already installed)
if (!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
# Load all defined packages
lapply(neededPackages, function(x) suppressPackageStartupMessages(
library(x, character.only = TRUE)))
################################################################################
################################################################################
# NOTE: Edit this section only
## Change your wd (location of time series files)
wd.path          <- "/Users/Lenovo/Documents/Github/dolores/input/"
# Change path were to export the files to
file.path.export <- "/Users/Lenovo/Documents/Github/dolores/input/"
# Give the file names
wind.name <- "timeseries_germany_wind_14.csv"
pv.name   <- "timeseries_germany_pv_14.csv"
# Year of data (2 digit)
year <- 14
## Set the number of clusters (e.g. 2)
no.cluster     <- 10
## Determine wether use want to export centroids (TRUE) or medoids (FALSE)
cluster.export.centroid <- TRUE
################################################################################
################################################################################
# Read in wind and pv data set
dat.germany.wind = read.csv(file = paste0(wd.path, "/", wind.name))
dat.germany.pv   = read.csv(file = paste0(wd.path, "/", pv.name))
colnames(dat.germany.wind)[2]   <- "hour"
colnames(dat.germany.pv)[2]     <- "hour"
rownames(dat.germany.wind)[1:2] <- c("lat", "lon")
rownames(dat.germany.pv)[1:2]   <- c("lat", "lon")
# Bind pv and wind data together
dat.germany <- rbind(dat.germany.wind, dat.germany.pv[-c(1:2),])
# Reshape data (each hour becomes a variable)
dat.germany.tre           = as.data.frame(t(dat.germany))
colnames(dat.germany.tre) = unlist(dat.germany.tre[2,])
colnames(dat.germany.tre)[1:2] = c("lat", "lon")
dat.germany.tr           = as.data.frame(apply(dat.germany.tre[-c(1:2),-c(1:2)], 2, as.numeric))
# Use euclidean distance
Dis.ecl <- dist(dat.germany.tr, method = "euclidean")
# levelplot(as.matrix(Dis.ecl)) # takes very long
# Hierachcal cluster analysis based on Ward & euclidean distance
clus <- hclust(Dis.ecl, method = "ward.D2")
# Function to find centroid in cluster i
clust.centroid = function(dat, clusters.IND) {
clusters.found = unique(clusters.IND)
centroid.list  = numeric()
for(j in 1:length(clusters.found)){
c   = clusters.found[j]
memb = which(clusters.IND == c)
# Find medoid (shortes distance to other cluster members)
centroid = colMeans(dat[memb,])
# Save centroid
if(j == 1){
centroid.list = centroid
} else {
centroid.list = rbind(centroid.list, centroid)}
}
rownames(centroid.list)  = clusters.found
return(centroid.list)
}
# Function to find medoid in clusters i
clust.medoid = function(distancematrix, clusters.IND) {
clusters.found = unique(clusters.IND)
cluster.list   = list()
for(j in 1:length(clusters.found)){
c   = clusters.found[j]
memb = which(clusters.IND == c)
# Find medoid (shortes distance to other cluster members)
cluster.list[[j]] = names(which.min(rowSums(distancematrix[memb, memb])))
}
unlist(cluster.list)
}
# Determine the number of clusters
clusters = cutree(clus, k = no.cluster)
# Get Ward's centroids: Use for k mean initialization
centroids = clust.centroid(dat.germany.tr, clusters)
# Run k means on extracted centroids
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
cluster.centroid   <-  cluster.k$centers
# Get number of units within each cluster
cluster.size <- cluster.k$size
# Oberve change of cluster membership
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
# Get medoids
cluster.medoid.IND  = clust.medoid(distancematrix = as.matrix(Dis.ecl), clusters.IND = final.memb)
cluster.medoid.wind = data.frame(t(dat.germany.wind[-c(1:2),paste0("outputV", cluster.medoid.IND)]))
cluster.medoid.pv   = data.frame(t(dat.germany.pv[-c(1:2), paste0("outputV", cluster.medoid.IND)]))
colnames(cluster.medoid.wind) = dat.germany.wind[-c(1:2),]$hour
colnames(cluster.medoid.pv)   = dat.germany.pv[-c(1:2),]$hour
# Get centroids
cluster.centroid.wind = data.frame(cluster.centroid[,1:8760])
cluster.centroid.pv   = data.frame(cluster.centroid[,8761:17520])
colnames(cluster.centroid.wind) = dat.germany.wind[-c(1:2),]$hour
colnames(cluster.centroid.pv)   = dat.germany.pv[-c(1:2),]$hour
# Export medoid/centroids membership to dataframe
if (cluster.export.centroid){
write.csv(cluster.centroid.wind, file = paste0(file.path.export, "/", "wind.centroids", no.cluster, "_", year, ".csv"))
write.csv(cluster.centroid.pv,   file = paste0(file.path.export, "/", "pv.centroids", no.cluster, "_", year, ".csv"))
write.csv(cluster.size,          file = paste0(file.path.export, "/", "cluster.size", no.cluster, "_", year, ".csv"))
} else {
write.csv(cluster.medoid.wind, file = paste0(file.path.export, "/", "wind.medoids", no.cluster, "_", year, ".csv"))
write.csv(cluster.medoid.pv,   file = paste0(file.path.export, "/", "pv.medoids", no.cluster, "_", year, ".csv"))
write.csv(cluster.size,          file = paste0(file.path.export, "/", "cluster.size", no.cluster, "_", year, ".csv"))
}
rm(list=ls())
################################################################################
#
# Extract Centroids or Medoids from clusters
#
################################################################################
rm(list = ls())
# List all packages needed for session
neededPackages = c("dplyr", "tidyr", "psych", "cluster", "distances",
"ecodist")
allPackages    = c(neededPackages %in% installed.packages()[,"Package"])
# Install packages (if not already installed)
if (!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
# Load all defined packages
lapply(neededPackages, function(x) suppressPackageStartupMessages(
library(x, character.only = TRUE)))
################################################################################
################################################################################
# NOTE: Edit this section only
## Change your wd (location of time series files)
wd.path          <- "/Users/Lenovo/Documents/Github/dolores/input/"
# Change path were to export the files to
file.path.export <- "/Users/Lenovo/Documents/Github/dolores/input/"
# Give the file names
wind.name <- "timeseries_germany_wind_14.csv"
pv.name   <- "timeseries_germany_pv_14.csv"
# Year of data (2 digit)
year <- 14
## Set the number of clusters (e.g. 2)
no.cluster     <- 8
## Determine wether use want to export centroids (TRUE) or medoids (FALSE)
cluster.export.centroid <- TRUE
################################################################################
################################################################################
# Read in wind and pv data set
dat.germany.wind = read.csv(file = paste0(wd.path, "/", wind.name))
dat.germany.pv   = read.csv(file = paste0(wd.path, "/", pv.name))
colnames(dat.germany.wind)[2]   <- "hour"
colnames(dat.germany.pv)[2]     <- "hour"
rownames(dat.germany.wind)[1:2] <- c("lat", "lon")
rownames(dat.germany.pv)[1:2]   <- c("lat", "lon")
# Bind pv and wind data together
dat.germany <- rbind(dat.germany.wind, dat.germany.pv[-c(1:2),])
# Reshape data (each hour becomes a variable)
dat.germany.tre           = as.data.frame(t(dat.germany))
colnames(dat.germany.tre) = unlist(dat.germany.tre[2,])
colnames(dat.germany.tre)[1:2] = c("lat", "lon")
dat.germany.tr           = as.data.frame(apply(dat.germany.tre[-c(1:2),-c(1:2)], 2, as.numeric))
# Use euclidean distance
Dis.ecl <- dist(dat.germany.tr, method = "euclidean")
# levelplot(as.matrix(Dis.ecl)) # takes very long
# Hierachcal cluster analysis based on Ward & euclidean distance
clus <- hclust(Dis.ecl, method = "ward.D2")
# Function to find centroid in cluster i
clust.centroid = function(dat, clusters.IND) {
clusters.found = unique(clusters.IND)
centroid.list  = numeric()
for(j in 1:length(clusters.found)){
c   = clusters.found[j]
memb = which(clusters.IND == c)
# Find medoid (shortes distance to other cluster members)
centroid = colMeans(dat[memb,])
# Save centroid
if(j == 1){
centroid.list = centroid
} else {
centroid.list = rbind(centroid.list, centroid)}
}
rownames(centroid.list)  = clusters.found
return(centroid.list)
}
# Function to find medoid in clusters i
clust.medoid = function(distancematrix, clusters.IND) {
clusters.found = unique(clusters.IND)
cluster.list   = list()
for(j in 1:length(clusters.found)){
c   = clusters.found[j]
memb = which(clusters.IND == c)
# Find medoid (shortes distance to other cluster members)
cluster.list[[j]] = names(which.min(rowSums(distancematrix[memb, memb])))
}
unlist(cluster.list)
}
# Determine the number of clusters
clusters = cutree(clus, k = no.cluster)
# Get Ward's centroids: Use for k mean initialization
centroids = clust.centroid(dat.germany.tr, clusters)
# Run k means on extracted centroids
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
cluster.centroid   <-  cluster.k$centers
# Get number of units within each cluster
cluster.size <- cluster.k$size
# Oberve change of cluster membership
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
# Get medoids
cluster.medoid.IND  = clust.medoid(distancematrix = as.matrix(Dis.ecl), clusters.IND = final.memb)
cluster.medoid.wind = data.frame(t(dat.germany.wind[-c(1:2),paste0("outputV", cluster.medoid.IND)]))
cluster.medoid.pv   = data.frame(t(dat.germany.pv[-c(1:2), paste0("outputV", cluster.medoid.IND)]))
colnames(cluster.medoid.wind) = dat.germany.wind[-c(1:2),]$hour
colnames(cluster.medoid.pv)   = dat.germany.pv[-c(1:2),]$hour
# Get centroids
cluster.centroid.wind = data.frame(cluster.centroid[,1:8760])
cluster.centroid.pv   = data.frame(cluster.centroid[,8761:17520])
colnames(cluster.centroid.wind) = dat.germany.wind[-c(1:2),]$hour
colnames(cluster.centroid.pv)   = dat.germany.pv[-c(1:2),]$hour
# Export medoid/centroids membership to dataframe
if (cluster.export.centroid){
write.csv(cluster.centroid.wind, file = paste0(file.path.export, "/", "wind.centroids", no.cluster, "_", year, ".csv"))
write.csv(cluster.centroid.pv,   file = paste0(file.path.export, "/", "pv.centroids", no.cluster, "_", year, ".csv"))
write.csv(cluster.size,          file = paste0(file.path.export, "/", "cluster.size", no.cluster, "_", year, ".csv"))
} else {
write.csv(cluster.medoid.wind, file = paste0(file.path.export, "/", "wind.medoids", no.cluster, "_", year, ".csv"))
write.csv(cluster.medoid.pv,   file = paste0(file.path.export, "/", "pv.medoids", no.cluster, "_", year, ".csv"))
write.csv(cluster.size,          file = paste0(file.path.export, "/", "cluster.size", no.cluster, "_", year, ".csv"))
}
rm(list=ls())
