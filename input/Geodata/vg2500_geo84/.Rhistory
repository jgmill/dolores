# Change path were to export the files to
file.path.export <- "/Users/claudiaguenther/Documents/dolores/input/"
# Give the file names
wind.name <- "timeseries_germany_wind_14.csv"
pv.name   <- "timeseries_germany_pv_14.csv"
# Year of data (2 digit)
year <- 14
## Set the number of clusters (e.g. 2)
no.cluster     <- 2
## Determine wether use want to export centroids (TRUE) or medoids (FALSE)
cluster.export.centroid <- TRUE
################################################################################
################################################################################
# Read in wind and pv data set
dat.germany.wind = read.csv(file = paste0(wd.path, "/", wind.name))
dat.germany.pv   = read.csv(file = paste0(wd.path, "/", pv.name))
colnames(dat.germany.wind)[2]   <- "hour"
colnames(dat.germany.pv)[2]     <- "hour"
rownames(dat.germany.wind)[1:2] <- c("lat", "lon")
rownames(dat.germany.pv)[1:2]   <- c("lat", "lon")
# Bind pv and wind data together
dat.germany <- rbind(dat.germany.wind, dat.germany.pv[-c(1:2),])
# Reshape data (each hour becomes a variable)
dat.germany.tre           = as.data.frame(t(dat.germany))
colnames(dat.germany.tre) = unlist(dat.germany.tre[2,])
colnames(dat.germany.tre)[1:2] = c("lat", "lon")
dat.germany.tr           = as.data.frame(apply(dat.germany.tre[-c(1:2),-c(1:2)], 2, as.numeric))
# Use euclidean distance
Dis.ecl <- dist(dat.germany.tr, method = "euclidean")
# levelplot(as.matrix(Dis.ecl)) # takes very long
# Hierachcal cluster analysis based on Ward & euclidean distance
clus <- hclust(Dis.ecl, method = "ward.D2")
# Function to find centroid in cluster i
clust.centroid = function(i, dat, clusters.IND) {
ind = (clusters.IND == i)
colMeans(dat[ind,])
}
# Function to find medoid in clusters i
clust.medoid = function(distancematrix, clusters.IND) {
clusters.found = unique(clusters.IND)
cluster.list   = list()
for(j in 1:length(clusters.found)){
c   = clusters.found[j]
memb = which(clusters.IND == c)
# Find medoid (shortes distance to other cluster members)
cluster.list[[j]] = names(which.min(rowSums(distancematrix[memb, memb])))
}
unlist(cluster.list)
}
# Determine the number of clusters
clusters = cutree(clus, k = no.cluster)
# Get Ward's centroids: Use for k mean initialization
centroids = t(sapply(unique(clusters), clust.centroid, dat.germany.tr, clusters))
# Run k means on extracted centroids
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
cluster.centroid   <-  cluster.k$centers
# Oberve change of cluster membership
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
# Get medoids
cluster.medoid.IND  = clust.medoid(distancematrix = as.matrix(Dis.ecl), clusters.IND = final.memb)
cluster.medoid.wind = data.frame(t(dat.germany.wind[-c(1:2),paste0("outputV", cluster.medoid.IND)]))
cluster.medoid.pv   = data.frame(t(dat.germany.pv[-c(1:2), paste0("outputV", cluster.medoid.IND)]))
cluster.medoid.IND
dat = dat.germany.tr
View(dat.germany.tr)
centroids
n = centroids
View(n)
clusters.found = unique(clusters.IND)
cluster.list   = list()
c   = clusters.found[j]
clusters.IND = clusters
clusters.found = unique(clusters.IND)
cluster.list   = list()
c   = clusters.found[j]
j = 1
c   = clusters.found[j]
memb = which(clusters.IND == c)
clusters.found = unique(clusters.IND)
centroid.list   = list()
for(j in 1:length(clusters.found)){
c   = clusters.found[j]
memb = which(clusters.IND == c)
# Find medoid (shortes distance to other cluster members)
centroid.list[[j]] = colMeans(dat[memb,])
}
clusters.found = unique(clusters.IND)
centroid.list   = list()
for(j in 1:length(clusters.found)){
c   = clusters.found[j]
memb = which(clusters.IND == c)
# Find medoid (shortes distance to other cluster members)
centroid.list[[j]] = colMeans(dat[memb,])
}
c   = clusters.found[j]
memb = which(clusters.IND == c)
centroid.list[[j]] = colMeans(dat[memb,])
clusters.found = unique(clusters.IND)
centroid.list   = list()
for(j in 1:length(clusters.found)){
c   = clusters.found[j]
memb = which(clusters.IND == c)
# Find medoid (shortes distance to other cluster members)
centroid.list[[j]] = colMeans(dat[memb,])
}
clust.centroid = function(dat, clusters.IND) {
clusters.found = unique(clusters.IND)
centroid.list   = list()
for(j in 1:length(clusters.found)){
c   = clusters.found[j]
memb = which(clusters.IND == c)
# Find medoid (shortes distance to other cluster members)
centroid.list[[j]] = colMeans(dat[memb,])
}
}
n = unlist(centroid.list)
centroid.list  = vector()
centroid.list  = numeric()
clusters.found = unique(clusters.IND)
centroid.list  = numeric()
for(j in 1:length(clusters.found)){
c   = clusters.found[j]
memb = which(clusters.IND == c)
# Find medoid (shortes distance to other cluster members)
centroid = colMeans(dat[memb,])
# Save centroid
if(j == 1){
centroid.list = centroid
} else {
centroid.list = rbind(centroid, centroid)}
}
return(centroid.list)
View(centroid.list)
clusters.found = unique(clusters.IND)
centroid.list  = numeric()
for(j in 1:length(clusters.found)){
c   = clusters.found[j]
memb = which(clusters.IND == c)
# Find medoid (shortes distance to other cluster members)
centroid = colMeans(dat[memb,])
# Save centroid
if(j == 1){
centroid.list = centroid
} else {
centroid.list = rbind(centroid, centroid)}
}
return(centroid.list)
View(centroid.list)
j = 1
c   = clusters.found[j]
memb = which(clusters.IND == c)
centroid = colMeans(dat[memb,])
centroid
centroid.list = centroid
j == 1
if(j == 1){
centroid.list = centroid
} else {
centroid.list = rbind(centroid, centroid)}
for(j in 1:length(clusters.found)){
c   = clusters.found[j]
memb = which(clusters.IND == c)
# Find medoid (shortes distance to other cluster members)
centroid = colMeans(dat[memb,])
# Save centroid
if(j == 1){
centroid.list = centroid
} else {
centroid.list = rbind(centroid, centroid)}
}
j == 1
clusters.found = unique(clusters.IND)
centroid.list  = numeric()
for(j in 1:length(clusters.found)){
c   = clusters.found[j]
memb = which(clusters.IND == c)
# Find medoid (shortes distance to other cluster members)
centroid = colMeans(dat[memb,])
# Save centroid
if(j == 1){
centroid.list = centroid
} else {
centroid.list = rbind(centroid.list, centroid)}
}
return(centroid.list)
View(centroid.list)
clust.centroid = function(dat, clusters.IND) {
clusters.found = unique(clusters.IND)
centroid.list  = numeric()
for(j in 1:length(clusters.found)){
c   = clusters.found[j]
memb = which(clusters.IND == c)
# Find medoid (shortes distance to other cluster members)
centroid = colMeans(dat[memb,])
# Save centroid
if(j == 1){
centroid.list = centroid
} else {
centroid.list = rbind(centroid.list, centroid)}
}
return(centroid.list)
}
clust.medoid = function(distancematrix, clusters.IND) {
clusters.found = unique(clusters.IND)
cluster.list   = list()
for(j in 1:length(clusters.found)){
c   = clusters.found[j]
memb = which(clusters.IND == c)
# Find medoid (shortes distance to other cluster members)
cluster.list[[j]] = names(which.min(rowSums(distancematrix[memb, memb])))
}
unlist(cluster.list)
}
clusters = cutree(clus, k = no.cluster)
n = centroids
centroids = clust.centroid(dat.germany.tr, clusters)
n
centroids = clust.centroid(dat.germany.tr, clusters)
View(centroids)
View(n)
clusters.found
clust.centroid = function(dat, clusters.IND) {
clusters.found = unique(clusters.IND)
centroid.list  = numeric()
for(j in 1:length(clusters.found)){
c   = clusters.found[j]
memb = which(clusters.IND == c)
# Find medoid (shortes distance to other cluster members)
centroid = colMeans(dat[memb,])
# Save centroid
if(j == 1){
centroid.list = centroid
} else {
centroid.list = rbind(centroid.list, centroid)}
}
rownames(centroid.list)  = clusters.found
return(centroid.list)
}
clust.medoid = function(distancematrix, clusters.IND) {
clusters.found = unique(clusters.IND)
cluster.list   = list()
for(j in 1:length(clusters.found)){
c   = clusters.found[j]
memb = which(clusters.IND == c)
# Find medoid (shortes distance to other cluster members)
cluster.list[[j]] = names(which.min(rowSums(distancematrix[memb, memb])))
}
unlist(cluster.list)
}
clusters = cutree(clus, k = no.cluster)
centroids = clust.centroid(dat.germany.tr, clusters)
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
cluster.centroid   <-  cluster.k$centers
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
cluster.medoid.IND  = clust.medoid(distancematrix = as.matrix(Dis.ecl), clusters.IND = final.memb)
View(centroids)
################################################################################
#
# Extract Centroids or Medoids from clusters
#
################################################################################
rm(list = ls())
# List all packages needed for session
neededPackages = c("dplyr", "tidyr", "psych", "cluster", "distances",
"ecodist")
allPackages    = c(neededPackages %in% installed.packages()[,"Package"])
# Install packages (if not already installed)
if (!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
# Load all defined packages
lapply(neededPackages, function(x) suppressPackageStartupMessages(
library(x, character.only = TRUE)))
################################################################################
################################################################################
# NOTE: Edit this section only
## Change your wd (location of time series files)
wd.path          <- "/Users/claudiaguenther/Documents/dolores/input/"
# Change path were to export the files to
file.path.export <- "/Users/claudiaguenther/Documents/dolores/input/"
# Give the file names
wind.name <- "timeseries_germany_wind_14.csv"
pv.name   <- "timeseries_germany_pv_14.csv"
# Year of data (2 digit)
year <- 14
## Set the number of clusters (e.g. 2)
no.cluster     <- 2
## Determine wether use want to export centroids (TRUE) or medoids (FALSE)
cluster.export.centroid <- TRUE
################################################################################
################################################################################
# Read in wind and pv data set
dat.germany.wind = read.csv(file = paste0(wd.path, "/", wind.name))
dat.germany.pv   = read.csv(file = paste0(wd.path, "/", pv.name))
colnames(dat.germany.wind)[2]   <- "hour"
colnames(dat.germany.pv)[2]     <- "hour"
rownames(dat.germany.wind)[1:2] <- c("lat", "lon")
rownames(dat.germany.pv)[1:2]   <- c("lat", "lon")
# Bind pv and wind data together
dat.germany <- rbind(dat.germany.wind, dat.germany.pv[-c(1:2),])
# Reshape data (each hour becomes a variable)
dat.germany.tre           = as.data.frame(t(dat.germany))
colnames(dat.germany.tre) = unlist(dat.germany.tre[2,])
colnames(dat.germany.tre)[1:2] = c("lat", "lon")
dat.germany.tr           = as.data.frame(apply(dat.germany.tre[-c(1:2),-c(1:2)], 2, as.numeric))
# Use euclidean distance
Dis.ecl <- dist(dat.germany.tr, method = "euclidean")
# levelplot(as.matrix(Dis.ecl)) # takes very long
# Hierachcal cluster analysis based on Ward & euclidean distance
clus <- hclust(Dis.ecl, method = "ward.D2")
# Function to find centroid in cluster i
clust.centroid = function(dat, clusters.IND) {
clusters.found = unique(clusters.IND)
centroid.list  = numeric()
for(j in 1:length(clusters.found)){
c   = clusters.found[j]
memb = which(clusters.IND == c)
# Find medoid (shortes distance to other cluster members)
centroid = colMeans(dat[memb,])
# Save centroid
if(j == 1){
centroid.list = centroid
} else {
centroid.list = rbind(centroid.list, centroid)}
}
rownames(centroid.list)  = clusters.found
return(centroid.list)
}
# Function to find medoid in clusters i
clust.medoid = function(distancematrix, clusters.IND) {
clusters.found = unique(clusters.IND)
cluster.list   = list()
for(j in 1:length(clusters.found)){
c   = clusters.found[j]
memb = which(clusters.IND == c)
# Find medoid (shortes distance to other cluster members)
cluster.list[[j]] = names(which.min(rowSums(distancematrix[memb, memb])))
}
unlist(cluster.list)
}
# Determine the number of clusters
clusters = cutree(clus, k = no.cluster)
# Get Ward's centroids: Use for k mean initialization
centroids = clust.centroid(dat.germany.tr, clusters)
# Run k means on extracted centroids
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
cluster.centroid   <-  cluster.k$centers
# Oberve change of cluster membership
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
# Get medoids
cluster.medoid.IND  = clust.medoid(distancematrix = as.matrix(Dis.ecl), clusters.IND = final.memb)
cluster.medoid.wind = data.frame(t(dat.germany.wind[-c(1:2),paste0("outputV", cluster.medoid.IND)]))
cluster.medoid.pv   = data.frame(t(dat.germany.pv[-c(1:2), paste0("outputV", cluster.medoid.IND)]))
colnames(cluster.medoid.wind) = dat.germany.wind[-c(1:2),]$hour
colnames(cluster.medoid.pv)   = dat.germany.pv[-c(1:2),]$hour
# Get centroids
cluster.centroid.wind = data.frame(cluster.centroid[,1:8760])
cluster.centroid.pv   = data.frame(cluster.centroid[,8761:17520])
colnames(cluster.centroid.wind) = dat.germany.wind[-c(1:2),]$hour
colnames(cluster.centroid.pv)   = dat.germany.pv[-c(1:2),]$hour
# Export medoid/centroids membership to dataframe
if (cluster.export.centroid){
write.csv(cluster.centroid.wind, file = paste0(file.path.export, "/", "wind.centroids", no.cluster, "_", year))
write.csv(cluster.centroid.pv,   file = paste0(file.path.export, "/", "pv.centroids", no.cluster, "_", year))
} else {
write.csv(cluster.medoid.wind, file = paste0(file.path.export, "/", "wind.medoids", no.cluster, "_", year))
write.csv(cluster.medoid.pv,   file = paste0(file.path.export, "/", "pv.medoids", no.cluster, "_", year))
}
rm(list=ls())
installed.packages("GDXRRW")
installed.packages("gdxrrw")
install.packages("gdxrrw")
igdx()
library(gdxrrw)
install.packages("gdxrrw")
install.packages(rgdx)
install.packages("rgdx")
################################################################################
#
# Getting geo coordinates
#
################################################################################
rm(list = ls())
# List all packages needed for session
neededPackages = c("dplyr", "tidyr", "psych", "maptools",
"rgdal", "rgeos", "lattice", "MASS", "GGally",
"ggmap", "ggplot2", "raster", "sp")
allPackages    = c(neededPackages %in% installed.packages()[,"Package"])
# Install packages (if not already installed)
if (!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
# Load all defined packages
lapply(neededPackages, function(x) suppressPackageStartupMessages(
library(x, character.only = TRUE)))
setwd("/Users/claudiaguenther/Downloads/OECD_MA_DEU")
s.dat   <- raster::shapefile("/Users/claudiaguenther/Downloads/OECD_MA_DEU/DEU_MAs_2016.shp")
plot(s.dat)
plot(s.dat$METRO)
plot(s.dat$)
plot(s.dat$)
setwd("/Users/claudiaguenther/Downloads/OECD_MA_DEU")
s.dat   <- raster::shapefile("/Users/claudiaguenther/Downloads/OECD_MA_DEU/DEU_MAs_2016.shp")
plot(s.dat)
################################################################################
#
# Download time series from renewables ninja
#
################################################################################
rm(list = ls())
# Change your wd
source('/Users/claudiaguenther/Documents/dolores/input/Code/R/ninja_automator.r')
# List all packages needed for session
neededPackages = c("dplyr", "tidyr", "psych", "cluster", "distances",
"ecodist", "magrittr", "lattice", "MASS", "foreign",
"NbClust", "factoextra", "caret", "ggplot2", "curl")
allPackages    = c(neededPackages %in% installed.packages()[,"Package"])
# Install packages (if not already installed)
if (!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
# Load all defined packages
lapply(neededPackages, function(x) suppressPackageStartupMessages(
library(x, character.only = TRUE)))
################################################################################
# Change your API (from renewables ninja account)
# insert your API authorisation token here
token = '13acaa28b1df03989474169c5e959dc6014382fb'
h = new_handle()
handle_setheaders(h, 'Authorization'=paste('Token ', token))
dat.coordinates        <- read.csv("/Users/claudiaguenther/Documents/dolores/input/Geodata/coordinates.csv")
dat.coordinates.europe <- read.csv("/Users/claudiaguenther/Documents/dolores/input/Geodata/coordinates_europe.csv")
lat = dat.coordinates$lat
lon = dat.coordinates$lon
no.obs = length(lat)
turbine = rep('Vestas+V80+2000', no.obs)
################################################################################
#
# Getting geo coordinates
#
################################################################################
rm(list = ls())
# List all packages needed for session
neededPackages = c("dplyr", "tidyr", "psych", "maptools",
"rgdal", "rgeos", "lattice", "MASS", "GGally",
"ggmap", "ggplot2", "raster", "sp")
allPackages    = c(neededPackages %in% installed.packages()[,"Package"])
# Install packages (if not already installed)
if (!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
# Load all defined packages
lapply(neededPackages, function(x) suppressPackageStartupMessages(
library(x, character.only = TRUE)))
################################################################################
# Shapefile Source Germany: http://www.geodatenzentrum.de/geodaten/gdz_rahmen.gdz_div
# Europe: https://www.naturalearthdata.com/downloads/110m-cultural-vectors/
# Set wd to where shape file is loacated
setwd("/Users/claudiaguenther/Documents/dolores/input/Geodata/vg2500_geo84")
s.ger    <- raster::shapefile("/Users/claudiaguenther/Documents/dolores/input/Geodata/vg2500_geo84/vg2500_bld.shp")
#s.europe <- raster::shapefile("/Users/claudiaguenther/Documents/dolores/input/Geodata/europe/Europe_coastline_shapefile/Europe_coastline_poly.shp")
s.world  <- raster::shapefile("/Users/claudiaguenther/Documents/dolores/input/Geodata/europe/ne_110m_admin_0_countries/ne_110m_admin_0_countries.shp")
plot(s.ger)
proj4string(s.ger) # WSG84 projection
s.europe <- s.world[s.world@data$CONTINENT == "Europe",]
s.europe <- s.europe[!(s.europe@data$SOVEREIGNT == "Russia"),] #Exclude Russia
s.europe <- s.europe[!(s.europe@data$SOVEREIGNT == "Iceland"),] #Exclude Iceland
rm(s.world)
plot(s.europe)
proj4string(s.europe) # WSG84 projection
make.grid <- function(starting.lon,starting.lat, lat.spacing, lon.spacing, n.lon){
x1    <- seq(from = starting.lon, to = starting.lon + lon.spacing*n.lon, by = lon.spacing)
n.lat <- n.lon/lon.spacing*lat.spacing
x2    <- seq(from = starting.lat, to = starting.lat + lat.spacing*n.lat, by = lat.spacing)
lon <- rep(x1, length(x2))
lat <- rep(x2, each = length(x1))
grid      <- data.frame(cbind(lon, lat))
return(grid)
}
grid <- make.grid(starting.lon = 5.625, starting.lat = 46.875,
lat.spacing = 0.5, lon.spacing = 0.625,  n.lon = 30)
grid.europe <- make.grid(starting.lon = -10, starting.lat = 36,
lat.spacing = 1, lon.spacing = 1.25,  n.lon = 50)
grid        <- SpatialPoints(grid, proj4string = CRS(proj4string(s.ger)))
grid.europe <- SpatialPoints(grid.europe, proj4string = CRS(proj4string(s.europe)))
plot(s.ger)
plot(grid, pch = ".", add = T)
plot(s.europe)
plot(grid.europe, pch = ".", add = T)
grid          <- grid[s.ger, ]
grid.europe   <- grid.europe[s.europe, ]
plot(s.ger, x = )
plot(grid, pch = ".", add = T)
plot(s.europe)
plot(grid.europe, pch = ".", add = T)
dat.coord            <- coordinates(grid)
dat.coord.europe     <- coordinates(grid.europe)
plot(s.ger, x = )
plot(grid, pch = ".", add = T)
write.csv(dat.coord, file = "/Users/claudiaguenther/Documents/dolores/input/Geodata/coordinates.csv")
write.csv(dat.coord.europe, file = "/Users/claudiaguenther/Documents/dolores/input/Geodata/coordinates_europe.csv")
