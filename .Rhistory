lines(DC.wind.org, col="black")
par(mar = rep(2, 4))
plot(DC.pv.clust,type="l",col="yellow")
lines(DC.pv.org, col="black")
cluster.center
clusters = cutree(clus, k = 10)
rect.hclust(clus, k=6, border="red")
centroids = t(sapply(unique(clusters), clust.centroid, dat.germany.tr, clusters))
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
cluster.center     <-  cluster.k$centers
final.centers     <- data.frame((sapply(unique(clusters),
clust.centroid,
dat.germany.tr,
cluster.k$cluster)))
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
dat.germany.wind <- data.frame(rbind(c(0, NA, final.memb), dat.germany.wind))
dat.germany.pv   <- data.frame(rbind(c(0, NA, final.memb), dat.germany.pv))
cluster.wind   <- cluster.k$centers[,1:8760]*cluster.k$size
cluster.pv     <- cluster.k$centers[,8761:17520]*cluster.k$size
DC.wind.clust <-  sort(apply(cluster.wind, 2, sum)/140, decreasing = TRUE)
DC.pv.clust   <-  sort(apply(cluster.pv, 2, sum)/140, decreasing = TRUE)
DC.wind.org   <- sort((apply(dat.germany.tr[,1:8760], 2, sum)/140), decreasing = TRUE)
DC.pv.org     <- sort((apply(dat.germany.tr[,8761:17520], 2, sum)/140), decreasing = TRUE)
par(mar = rep(2, 4))
plot(DC.wind.clust,type="l",col="blue")
lines(DC.wind.org, col="black")
par(mar = rep(2, 4))
plot(DC.pv.clust,type="l",col="yellow")
lines(DC.pv.org, col="black")
check <- cbind(cluster = c(final.memb), dat.germany.tre[-c(1:2),])
check$lat <- as.numeric(as.character(check$lat))
check$lon <- as.numeric(as.character(check$lon))
check$cluster <- as.numeric((check$cluster))
scatter.hist(check$cluster, check$lat)
scatter.hist(check$cluster, check$lon)
check$Cluster <- as.factor(check$cluster)
check$avail   <- apply(check[,4:ncol(check)], 1, function(x) mean(as.numeric(as.character(x))))
img <- readPNG("input/clustering_images/ger2.png")
ger <- rasterGrob(img, interpolate=TRUE)
plot.ger <- ggplot(check[-1,])  +
annotation_custom(rasterGrob(img,
width = unit(2.18,"npc"),
height = unit(1.34,"npc")),  5.4, 14.7, -Inf, Inf)   +
theme_bw()   +
geom_point(aes(x=lon, y=lat,
colour=Cluster),
size= 4) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.margin=unit(c(1,1,1,2), "cm"),
panel.grid = element_blank(),
panel.background = element_blank())
plot.ger + scale_colour_brewer(palette = "BrBG", type = seq)
check <- cbind(cluster = c(final.memb), dat.germany.tre[-c(1:2),])
check$lat <- as.numeric(as.character(check$lat))
check$lon <- as.numeric(as.character(check$lon))
check$cluster <- as.numeric((check$cluster))
scatter.hist(check$cluster, check$lat)
par(mar = rep(2, 4))
check <- cbind(cluster = c(final.memb), dat.germany.tre[-c(1:2),])
check$lat <- as.numeric(as.character(check$lat))
check$lon <- as.numeric(as.character(check$lon))
check$cluster <- as.numeric((check$cluster))
scatter.hist(check$cluster, check$lat)
rm(list = ls())
neededPackages = c("dplyr", "tidyr", "psych", "cluster", "distances",
"ecodist", "magrittr", "lattice", "MASS", "GGally",
"NbClust", "factoextra", "caret", "ggplot2", "png", "grid")
allPackages    = c(neededPackages %in% installed.packages()[,"Package"])
if (!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
lapply(neededPackages, function(x) suppressPackageStartupMessages(
library(x, character.only = TRUE)))
wd.path = "/Users/claudiaguenther/Documents/dolores/"
dat.germany.wind = read.csv(paste0(wd.path,"input/timeseries_germany_wind_14.csv"))
dat.germany.pv   =read.csv(paste0(wd.path, "input/timeseries_germany_pv_14.csv"))
colnames(dat.germany.wind)[2]   <- "hour"
colnames(dat.germany.pv)[2]     <- "hour"
rownames(dat.germany.wind)[1:2] <- c("lat", "lon")
rownames(dat.germany.pv)[1:2]   <- c("lat", "lon")
dat.germany <- rbind(dat.germany.wind, dat.germany.pv[-c(1:2),])
dat.germany.tre           = as.data.frame(t(dat.germany))
colnames(dat.germany.tre) = unlist(dat.germany.tre[2,])
colnames(dat.germany.tre)[1:2] = c("lat", "lon")
dat.germany.tr           = as.data.frame(apply(dat.germany.tre[-c(1:2),-c(1:2)], 2, as.numeric))
Dis.ecl <- dist(dat.germany.tr, method = "euclidean")
clus <- hclust(Dis.ecl, method = "ward.D2")
plot(clus)
plot(clus, hang = -1, cex = 0.6)
dendrogram <- as.dendrogram(clus)
plot(dendrogram, ylab = "Height", leaflab = "none")
clust.centroid = function(i, dat, clusters.IND) {
ind = (clusters.IND == i)
colMeans(dat[ind,])
}
clusters = cutree(clus, k = 10)
rect.hclust(clus, k=6, border="red")
centroids = t(sapply(unique(clusters), clust.centroid, dat.germany.tr, clusters))
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
cluster.center     <-  cluster.k$centers
final.centers     <- data.frame((sapply(unique(clusters),
clust.centroid,
dat.germany.tr,
cluster.k$cluster)))
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
dat.germany.wind <- data.frame(rbind(c(0, NA, final.memb), dat.germany.wind))
dat.germany.pv   <- data.frame(rbind(c(0, NA, final.memb), dat.germany.pv))
cluster.wind   <- cluster.k$centers[,1:8760]*cluster.k$size
cluster.pv     <- cluster.k$centers[,8761:17520]*cluster.k$size
DC.wind.clust <-  sort(apply(cluster.wind, 2, sum)/140, decreasing = TRUE)
DC.pv.clust   <-  sort(apply(cluster.pv, 2, sum)/140, decreasing = TRUE)
DC.wind.org   <- sort((apply(dat.germany.tr[,1:8760], 2, sum)/140), decreasing = TRUE)
DC.pv.org     <- sort((apply(dat.germany.tr[,8761:17520], 2, sum)/140), decreasing = TRUE)
check <- cbind(cluster = c(final.memb), dat.germany.tre[-c(1:2),])
check$lat <- as.numeric(as.character(check$lat))
check$lon <- as.numeric(as.character(check$lon))
check$cluster <- as.numeric((check$cluster))
scatter.hist(check$cluster, check$lat)
scatter.hist(check$cluster, check$lon)
check$Cluster <- as.factor(check$cluster)
check$avail   <- apply(check[,4:ncol(check)], 1, function(x) mean(as.numeric(as.character(x))))
scatter.hist(check$cluster, check$lat)
check <- cbind(cluster = c(final.memb), dat.germany.tre[-c(1:2),])
check$lat <- as.numeric(as.character(check$lat))
check$lon <- as.numeric(as.character(check$lon))
check$cluster <- as.numeric((check$cluster))
scatter.hist(check$cluster, check$lat)
scatter.hist(check$cluster, check$lon)
check$Cluster <- as.factor(check$cluster)
check$avail   <- apply(check[,4:ncol(check)], 1, function(x) mean(as.numeric(as.character(x))))
################################################################################
#
# Clustering of wind and pv time series
#
################################################################################
rm(list = ls())
# List all packages needed for session
neededPackages = c("dplyr", "tidyr", "psych", "cluster", "distances",
"ecodist", "magrittr", "lattice", "MASS", "GGally",
"NbClust", "factoextra", "caret", "ggplot2", "png", "grid")
allPackages    = c(neededPackages %in% installed.packages()[,"Package"])
# Install packages (if not already installed)
if (!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
# Load all defined packages
lapply(neededPackages, function(x) suppressPackageStartupMessages(
library(x, character.only = TRUE)))
################################################################################
## Change path to working directory
#wd.path = "C:/Users/Lenovo/Documents/GitHub/dolores/"
wd.path = "/Users/claudiaguenther/Documents/dolores/"
# Read in wind and pv data set
dat.germany.wind = read.csv(paste0(wd.path,"input/timeseries_germany_wind_14.csv"))
dat.germany.pv   =read.csv(paste0(wd.path, "input/timeseries_germany_pv_14.csv"))
colnames(dat.germany.wind)[2]   <- "hour"
colnames(dat.germany.pv)[2]     <- "hour"
rownames(dat.germany.wind)[1:2] <- c("lat", "lon")
rownames(dat.germany.pv)[1:2]   <- c("lat", "lon")
################################################################################
# Bind pv and wind data together
dat.germany <- rbind(dat.germany.wind, dat.germany.pv[-c(1:2),])
# Reshape data (each hour becomes a variable)
dat.germany.tre           = as.data.frame(t(dat.germany))
colnames(dat.germany.tre) = unlist(dat.germany.tre[2,])
colnames(dat.germany.tre)[1:2] = c("lat", "lon")
dat.germany.tr           = as.data.frame(apply(dat.germany.tre[-c(1:2),-c(1:2)], 2, as.numeric))
# Use euclidean distance
Dis.ecl <- dist(dat.germany.tr, method = "euclidean")
# levelplot(as.matrix(Dis.ecl)) # takes very long
# Hierachcal cluster analysis based on Ward & euclidean distance
clus <- hclust(Dis.ecl, method = "ward.D2")
plot(clus)
plot(clus, hang = -1, cex = 0.6)
dendrogram <- as.dendrogram(clus)
plot(dendrogram, ylab = "Height", leaflab = "none")
# Function to find medoid in cluster i
clust.centroid = function(i, dat, clusters.IND) {
ind = (clusters.IND == i)
colMeans(dat[ind,])
}
# Determine the number of clusters
clusters = cutree(clus, k = 6)
rect.hclust(clus, k=6, border="red")
# Get centroids: Use for k mean initialization
centroids = t(sapply(unique(clusters), clust.centroid, dat.germany.tr, clusters))
# Run k means on extracted centroids
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
cluster.center     <-  cluster.k$centers
# What are unstandardized values ?
final.centers     <- data.frame((sapply(unique(clusters),
clust.centroid,
dat.germany.tr,
cluster.k$cluster)))
# Oberve change of cluster membership
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
# Add cluster membership to dataframe
dat.germany.wind <- data.frame(rbind(c(0, NA, final.memb), dat.germany.wind))
dat.germany.pv   <- data.frame(rbind(c(0, NA, final.memb), dat.germany.pv))
See regional alignment of clusters
check <- cbind(cluster = c(final.memb), dat.germany.tre[-c(1:2),])
#check <- check[order(check$lat, check$lon),]
check$lat <- as.numeric(as.character(check$lat))
check$lon <- as.numeric(as.character(check$lon))
check$cluster <- as.numeric((check$cluster))
scatter.hist(check$cluster, check$lat)
scatter.hist(check$cluster, check$lon)
check$Cluster <- as.factor(check$cluster)
check$avail   <- apply(check[,4:ncol(check)], 1, function(x) mean(as.numeric(as.character(x))))
img <- readPNG("input/clustering_images/ger2.png")
getwd()
setwd("wd.path")
setwd(wd.path)
getwd()
plot.ger <- ggplot(check[-1,])  +
annotation_custom(rasterGrob(img,
width = unit(2.18,"npc"),
height = unit(1.34,"npc")),  5.4, 14.7, -Inf, Inf)   +
theme_bw()   +
geom_point(aes(x=lon, y=lat,
colour=Cluster),
size= 4) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.margin=unit(c(1,1,1,2), "cm"),
panel.grid = element_blank(),
panel.background = element_blank())
img <- readPNG("input/clustering_images/ger2.png")
ger <- rasterGrob(img, interpolate=TRUE)
plot.ger <- ggplot(check[-1,])  +
annotation_custom(rasterGrob(img,
width = unit(2.18,"npc"),
height = unit(1.34,"npc")),  5.4, 14.7, -Inf, Inf)   +
theme_bw()   +
geom_point(aes(x=lon, y=lat,
colour=Cluster),
size= 4) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.margin=unit(c(1,1,1,2), "cm"),
panel.grid = element_blank(),
panel.background = element_blank())
plot.ger + scale_colour_brewer(palette = "BrBG", type = seq)
plot(check$lat, check$lon)
par(mar = rep(2, 4))
plot(check$lat, check$lon)
par(mar = rep(1, 4))
plot(check$lat, check$lon)
rm(plot())
plot = ls()
plot(check$lat, check$lon)
rm(list = ls())
################################################################################
#
# Clustering of wind and pv time series
#
################################################################################
rm(list = ls())
# List all packages needed for session
neededPackages = c("dplyr", "tidyr", "psych", "cluster", "distances",
"ecodist", "magrittr", "lattice", "MASS", "GGally",
"NbClust", "factoextra", "caret", "ggplot2", "png", "grid")
allPackages    = c(neededPackages %in% installed.packages()[,"Package"])
# Install packages (if not already installed)
if (!all(allPackages)) {
missingIDX = which(allPackages == FALSE)
needed     = neededPackages[missingIDX]
lapply(needed, install.packages)
}
# Load all defined packages
lapply(neededPackages, function(x) suppressPackageStartupMessages(
library(x, character.only = TRUE)))
################################################################################
## Change path to working directory
#wd.path = "C:/Users/Lenovo/Documents/GitHub/dolores/"
wd.path = "/Users/claudiaguenther/Documents/dolores/"
# Read in wind and pv data set
dat.germany.wind = read.csv(paste0(wd.path,"input/timeseries_germany_wind_14.csv"))
dat.germany.pv   =read.csv(paste0(wd.path, "input/timeseries_germany_pv_14.csv"))
colnames(dat.germany.wind)[2]   <- "hour"
colnames(dat.germany.pv)[2]     <- "hour"
rownames(dat.germany.wind)[1:2] <- c("lat", "lon")
rownames(dat.germany.pv)[1:2]   <- c("lat", "lon")
################################################################################
# Bind pv and wind data together
dat.germany <- rbind(dat.germany.wind, dat.germany.pv[-c(1:2),])
# Reshape data (each hour becomes a variable)
dat.germany.tre           = as.data.frame(t(dat.germany))
colnames(dat.germany.tre) = unlist(dat.germany.tre[2,])
colnames(dat.germany.tre)[1:2] = c("lat", "lon")
dat.germany.tr           = as.data.frame(apply(dat.germany.tre[-c(1:2),-c(1:2)], 2, as.numeric))
# Use euclidean distance
Dis.ecl <- dist(dat.germany.tr, method = "euclidean")
# levelplot(as.matrix(Dis.ecl)) # takes very long
# Hierachcal cluster analysis based on Ward & euclidean distance
clus <- hclust(Dis.ecl, method = "ward.D2")
plot(clus)
plot(clus, hang = -1, cex = 0.6)
dendrogram <- as.dendrogram(clus)
plot(dendrogram, ylab = "Height", leaflab = "none")
# Function to find medoid in cluster i
clust.centroid = function(i, dat, clusters.IND) {
ind = (clusters.IND == i)
colMeans(dat[ind,])
}
# Determine the number of clusters
clusters = cutree(clus, k = 6)
rect.hclust(clus, k=6, border="red")
# Get centroids: Use for k mean initialization
centroids = t(sapply(unique(clusters), clust.centroid, dat.germany.tr, clusters))
# Run k means on extracted centroids
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
cluster.center     <-  cluster.k$centers
# What are unstandardized values ?
final.centers     <- data.frame((sapply(unique(clusters),
clust.centroid,
dat.germany.tr,
cluster.k$cluster)))
# Oberve change of cluster membership
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
# Add cluster membership to dataframe
dat.germany.wind <- data.frame(rbind(c(0, NA, final.memb), dat.germany.wind))
dat.germany.pv   <- data.frame(rbind(c(0, NA, final.memb), dat.germany.pv))
################################################################################
# Check suitability of cluster solution
# Rebuild wind and pv load hours
cluster.wind   <- cluster.k$centers[,1:8760]*cluster.k$size
cluster.pv     <- cluster.k$centers[,8761:17520]*cluster.k$size
DC.wind.clust <-  sort(apply(cluster.wind, 2, sum)/140, decreasing = TRUE)
DC.pv.clust   <-  sort(apply(cluster.pv, 2, sum)/140, decreasing = TRUE)
DC.wind.org   <- sort((apply(dat.germany.tr[,1:8760], 2, sum)/140), decreasing = TRUE)
DC.pv.org     <- sort((apply(dat.germany.tr[,8761:17520], 2, sum)/140), decreasing = TRUE)
par(mar = rep(2, 4))
plot(DC.wind.clust,type="l",col="blue")
lines(DC.wind.org, col="black")
par(mar = rep(2, 4))
plot(DC.pv.clust,type="l",col="yellow")
lines(DC.pv.org, col="black")
################################################################################
# Cluster visualization
# See regional alignment of clusters
check <- cbind(cluster = c(final.memb), dat.germany.tre[-c(1:2),])
#check <- check[order(check$lat, check$lon),]
check$lat <- as.numeric(as.character(check$lat))
check$lon <- as.numeric(as.character(check$lon))
check$cluster <- as.numeric((check$cluster))
scatter.hist(check$cluster, check$lat)
scatter.hist(check$cluster, check$lon)
check$Cluster <- as.factor(check$cluster)
check$avail   <- apply(check[,4:ncol(check)], 1, function(x) mean(as.numeric(as.character(x))))
dev.off()
scatter.hist(check$cluster, check$lat)
scatter.hist(check$cluster, check$lon)
dev.off()
img <- readPNG("input/clustering_images/ger2.png")
ger <- rasterGrob(img, interpolate=TRUE)
plot.ger <- ggplot(check[-1,])  +
annotation_custom(rasterGrob(img,
width = unit(2.18,"npc"),
height = unit(1.34,"npc")),  5.4, 14.7, -Inf, Inf)   +
theme_bw()   +
geom_point(aes(x=lon, y=lat,
colour=Cluster),
size= 4) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.margin=unit(c(1,1,1,2), "cm"),
panel.grid = element_blank(),
panel.background = element_blank())
plot.ger + scale_colour_brewer(palette = "BrBG", type = seq)
clusters = cutree(clus, k = 20)
rect.hclust(clus, k=6, border="red")
centroids = t(sapply(unique(clusters), clust.centroid, dat.germany.tr, clusters))
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
cluster.center     <-  cluster.k$centers
final.centers     <- data.frame((sapply(unique(clusters),
clust.centroid,
dat.germany.tr,
cluster.k$cluster)))
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
dat.germany.wind <- data.frame(rbind(c(0, NA, final.memb), dat.germany.wind))
dat.germany.pv   <- data.frame(rbind(c(0, NA, final.memb), dat.germany.pv))
cluster.wind   <- cluster.k$centers[,1:8760]*cluster.k$size
cluster.pv     <- cluster.k$centers[,8761:17520]*cluster.k$size
DC.wind.clust <-  sort(apply(cluster.wind, 2, sum)/140, decreasing = TRUE)
DC.pv.clust   <-  sort(apply(cluster.pv, 2, sum)/140, decreasing = TRUE)
DC.wind.org   <- sort((apply(dat.germany.tr[,1:8760], 2, sum)/140), decreasing = TRUE)
DC.pv.org     <- sort((apply(dat.germany.tr[,8761:17520], 2, sum)/140), decreasing = TRUE)
par(mar = rep(2, 4))
plot(DC.wind.clust,type="l",col="blue")
lines(DC.wind.org, col="black")
par(mar = rep(2, 4))
plot(DC.pv.clust,type="l",col="yellow")
lines(DC.pv.org, col="black")
check <- cbind(cluster = c(final.memb), dat.germany.tre[-c(1:2),])
check$lat <- as.numeric(as.character(check$lat))
check$lon <- as.numeric(as.character(check$lon))
check$cluster <- as.numeric((check$cluster))
scatter.hist(check$cluster, check$lat)
scatter.hist(check$cluster, check$lon)
check$Cluster <- as.factor(check$cluster)
check$avail   <- apply(check[,4:ncol(check)], 1, function(x) mean(as.numeric(as.character(x))))
img <- readPNG("input/clustering_images/ger2.png")
ger <- rasterGrob(img, interpolate=TRUE)
dev.off()
plot.ger <- ggplot(check[-1,])  +
annotation_custom(rasterGrob(img,
width = unit(2.18,"npc"),
height = unit(1.34,"npc")),  5.4, 14.7, -Inf, Inf)   +
theme_bw()   +
geom_point(aes(x=lon, y=lat,
colour=Cluster),
size= 4) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.margin=unit(c(1,1,1,2), "cm"),
panel.grid = element_blank(),
panel.background = element_blank())
plot.ger + scale_colour_brewer(palette = "BrBG", type = seq)
clusters = cutree(clus, k = 11)
centroids = t(sapply(unique(clusters), clust.centroid, dat.germany.tr, clusters))
cluster.k          <-  kmeans(dat.germany.tr, centers = centroids)
cluster.center     <-  cluster.k$centers
final.centers     <- data.frame((sapply(unique(clusters),
clust.centroid,
dat.germany.tr,
cluster.k$cluster)))
final.table <- table(cluster.k$cluster, clusters) # relatively stable
final.memb  <- cluster.k$cluster
dat.germany.wind <- data.frame(rbind(c(0, NA, final.memb), dat.germany.wind))
dat.germany.pv   <- data.frame(rbind(c(0, NA, final.memb), dat.germany.pv))
cluster.wind   <- cluster.k$centers[,1:8760]*cluster.k$size
check <- cbind(cluster = c(final.memb), dat.germany.tre[-c(1:2),])
check$lat <- as.numeric(as.character(check$lat))
check$lon <- as.numeric(as.character(check$lon))
check$cluster <- as.numeric((check$cluster))
scatter.hist(check$cluster, check$lat)
scatter.hist(check$cluster, check$lon)
check$Cluster <- as.factor(check$cluster)
check$avail   <- apply(check[,4:ncol(check)], 1, function(x) mean(as.numeric(as.character(x))))
img <- readPNG("input/clustering_images/ger2.png")
ger <- rasterGrob(img, interpolate=TRUE)
dev.off()
plot.ger <- ggplot(check[-1,])  +
annotation_custom(rasterGrob(img,
width = unit(2.18,"npc"),
height = unit(1.34,"npc")),  5.4, 14.7, -Inf, Inf)   +
theme_bw()   +
geom_point(aes(x=lon, y=lat,
colour=Cluster),
size= 4) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(), axis.line = element_line(colour = "black")) + theme(
axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank(),
axis.title.y=element_blank(),
axis.text.y=element_blank(),
axis.ticks.y=element_blank(),
plot.margin=unit(c(1,1,1,2), "cm"),
panel.grid = element_blank(),
panel.background = element_blank())
plot.ger + scale_colour_brewer(palette = "BrBG", type = seq)
mean.avail.vec   <- apply(cluster.k$centers, 1, mean)
mean.av.wind.vec <- apply(cluster.k$centers[,1:8760], 1, mean)
mean.av.pv.vec   <- apply(cluster.k$centers[,8761:17520], 1, mean)
sd.vec           <- apply(cluster.k$centers, 1, sd)
size.vec         <- cluster.k$size
size.vec
mean.av.wind.vec
mean.av.pv.vec
mean.av.pv.vec
